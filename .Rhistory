line[71] <-"0.0"
line[72] <-"1"
line[73] <-"-End of file-"
print(line)
writeLines(line,mpFile)
}
convertPTCtoMP(nPath,n)
for (i in 1:length(ind)){
l[i] <- paste(pt$V1[ind[i]],"\n")
p = strsplit(pt$V1[ind[i]],",")}
p
for (i in 1:length(ind)){
l[i] <- paste(pt$V1[ind[i]],"\n")
init[i] = strsplit(pt$V1[ind[i]],",")[4]
}
init
for (i in 1:length(ind)){
l[i] <- paste(pt$V1[ind[i]],"\n")
p = strsplit(pt$V1[ind[i]],",")
print(p)
init[i] = p[4]
}
for (i in 1:length(ind)){
l[i] <- paste(pt$V1[ind[i]],"\n")
p = strsplit(pt$V1[ind[i]],",")
print(p)
print(p[4])
init[i] = p[4]
}
for (i in 1:length(ind)){
l[i] <- paste(pt$V1[ind[i]],"\n")
p = strsplit(pt$V1[ind[i]],",")
init[i] = unlist(p)[4]
}
init
paste(init,collapse = " ")
paste(init,collapse = "\n")
convertPTCtoMP <- function(nPath,n)
{
library(stringr)
title <- paste("B",n,sep = "")
mpFile <- file.path(nPath,paste(title,".mp",sep = ""))
mpFile<- gsub("/", "\\\\", mpFile)
ptcFile <- file.path(nPath,paste("B",n,".ptc",sep = ""))
ptcFile<- gsub("/", "\\\\", ptcFile)
pt <- read.csv(ptcFile,sep = "\n",header = FALSE)
pops <- lapply(pt, function (x) {str_extract(x, "Pop")})
ind <- which(!is.na(pops$V1))
migration_ind  <- lapply(pt, function (x) {str_extract(x, "Migration")})
migration_ind<- which(!is.na(migration_ind$V1))
reps <- 1000
duration <-100
init = list()
line = character()
#sink(mpFile)
line[1] <- "Metapopulation input file (6.0 map=Ë‡"
line[2] <- title
line[3] <- "\n\n\n"
line[4] <- reps
line[5] <- duration
line[6] <- "TRUE "
line[7] <- "1 FALSE"
line[8] <- "\n"
line[9] <- "Local"
line[10] <- ""
line[11] <- "not spread"
line[12] <- "0.0000"
line[13] <- "0.0000,0.0000,0.0000,0.0000"
line[14] <- "\n"
line[15] <-  "Local"
line[16] <- ""
line[17] <- "not spread"
line[18] <- "0.0000"
line[19] <- "0.0000,0.0000,0.0000,0.0000"
line[20] <- "False,Zero"
line[21] <- "all vital rates"
line[22] <- "Lognormal,0"
line[23] <- "0.000000"
line[24] <- "count in total"
line[25] <- "1 (F, S, K correlated"
line[26] <-  "No"
line[27] <- "AllStages"
line[28] <-  "Yes"
line[29] <- "EX"
line[30] <- "\n"
line[31] <- "years"
line[32] <- "OnlyFemale"
line[33] <- "1"
line[34] <- "Monogamous"
line[35] <- "2.0"
line[36] <- "2.0"
line[37] <- "0.0000"
line[38] <- "0"
l = character()
for (i in 1:length(ind)){
l[i] <- paste(pt$V1[ind[i]],"\n")
p = strsplit(pt$V1[ind[i]],",")
init[i] = unlist(p)[4]
}
line[39] <-  paste(l, collapse = " ")
line[40] <-"Migration"
line[41] <-"FALSE"
line[42] <-pt$V1[migration_ind+2]
line[43] <- paste(rep(strrep(" 0,",length(ind)),length(ind)),collapse = "\n")
line[44] <-"Correlation"
line[45] <-"TRUE"
line[46] <-pt$V1[migration_ind+5]
line[47] <-"1 type(s of stage matrix"
line[48] <-"default"
line[49] <-"1.000000"
line[50] <-"1.000000"
line[51] <-"0"
line[52] <-"1.000000000"
line[53] <-"1 type(s of st.dev. matrix"
line[54] <-"default"
line[55] <-"0.000000000"
line[56] <-"Constraints Matrix"
line[57] <-"0.000000"
line[58] <-"1.000000"
line[59] <-"1.000000"
line[60] <-"1.000000"
line[61] <-"1.000000"
line[62] <-"1.000000"
line[63] <- paste(init,collapse = "\n")
line[64] <-"Stage 1"
line[65] <-"1.0"
line[66] <-"FALSE"
line[67] <-"TRUE"
line[68] <-"1.0"
line[69] <-"0 (pop mgmnt)"
line[70] <-"0.0"
line[71] <-"0.0"
line[72] <-"1"
line[73] <-"-End of file-"
print(line)
writeLines(line,mpFile)
}
convertPTCtoMP(nPath,n)
l = character()
for (i in 1:length(ind)){
l[i] <- pt$V1[ind[i]]
p = strsplit(pt$V1[ind[i]],",")
init[i] = unlist(p)[4]
}
paste(l, collapse = "\n")
convertPTCtoMP <- function(nPath,n)
{
library(stringr)
title <- paste("B",n,sep = "")
mpFile <- file.path(nPath,paste(title,".mp",sep = ""))
mpFile<- gsub("/", "\\\\", mpFile)
ptcFile <- file.path(nPath,paste("B",n,".ptc",sep = ""))
ptcFile<- gsub("/", "\\\\", ptcFile)
pt <- read.csv(ptcFile,sep = "\n",header = FALSE)
pops <- lapply(pt, function (x) {str_extract(x, "Pop")})
ind <- which(!is.na(pops$V1))
migration_ind  <- lapply(pt, function (x) {str_extract(x, "Migration")})
migration_ind<- which(!is.na(migration_ind$V1))
reps <- 1000
duration <-100
init = list()
line = character()
#sink(mpFile)
line[1] <- "Metapopulation input file (6.0 map=Ë‡"
line[2] <- title
line[3] <- "\n\n\n"
line[4] <- reps
line[5] <- duration
line[6] <- "TRUE "
line[7] <- "1 FALSE"
line[8] <- "\n"
line[9] <- "Local"
line[10] <- ""
line[11] <- "not spread"
line[12] <- "0.0000"
line[13] <- "0.0000,0.0000,0.0000,0.0000"
line[14] <- "\n"
line[15] <-  "Local"
line[16] <- ""
line[17] <- "not spread"
line[18] <- "0.0000"
line[19] <- "0.0000,0.0000,0.0000,0.0000"
line[20] <- "False,Zero"
line[21] <- "all vital rates"
line[22] <- "Lognormal,0"
line[23] <- "0.000000"
line[24] <- "count in total"
line[25] <- "1 (F, S, K correlated"
line[26] <-  "No"
line[27] <- "AllStages"
line[28] <-  "Yes"
line[29] <- "EX"
line[30] <- "\n"
line[31] <- "years"
line[32] <- "OnlyFemale"
line[33] <- "1"
line[34] <- "Monogamous"
line[35] <- "2.0"
line[36] <- "2.0"
line[37] <- "0.0000"
line[38] <- "0"
l = character()
for (i in 1:length(ind)){
l[i] <- pt$V1[ind[i]]
p = strsplit(pt$V1[ind[i]],",")
init[i] = unlist(p)[4]
}
line[39] <-  paste(l, collapse = "\n")
line[40] <-"Migration"
line[41] <-"FALSE"
line[42] <-pt$V1[migration_ind+2]
line[43] <- paste(rep(strrep(" 0,",length(ind)),length(ind)),collapse = "\n")
line[44] <-"Correlation"
line[45] <-"TRUE"
line[46] <-pt$V1[migration_ind+5]
line[47] <-"1 type(s of stage matrix"
line[48] <-"default"
line[49] <-"1.000000"
line[50] <-"1.000000"
line[51] <-"0"
line[52] <-"1.000000000"
line[53] <-"1 type(s of st.dev. matrix"
line[54] <-"default"
line[55] <-"0.000000000"
line[56] <-"Constraints Matrix"
line[57] <-"0.000000"
line[58] <-"1.000000"
line[59] <-"1.000000"
line[60] <-"1.000000"
line[61] <-"1.000000"
line[62] <-"1.000000"
line[63] <- paste(init,collapse = "\n")
line[64] <-"Stage 1"
line[65] <-"1.0"
line[66] <-"FALSE"
line[67] <-"TRUE"
line[68] <-"1.0"
line[69] <-"0 (pop mgmnt)"
line[70] <-"0.0"
line[71] <-"0.0"
line[72] <-"1"
line[73] <-"-End of file-"
print(line)
writeLines(line,mpFile)
}
convertPTCtoMP(nPath,n)
convertPTCtoMP <- function(nPath,n)
{
library(stringr)
title <- paste("B",n,sep = "")
mpFile <- file.path(nPath,paste(title,".mp",sep = ""))
mpFile<- gsub("/", "\\\\", mpFile)
ptcFile <- file.path(nPath,paste("B",n,".ptc",sep = ""))
ptcFile<- gsub("/", "\\\\", ptcFile)
pt <- read.csv(ptcFile,sep = "\n",header = FALSE)
pops <- lapply(pt, function (x) {str_extract(x, "Pop")})
ind <- which(!is.na(pops$V1))
migration_ind  <- lapply(pt, function (x) {str_extract(x, "Migration")})
migration_ind<- which(!is.na(migration_ind$V1))
reps <- 1000
duration <-100
init = list()
line = character()
#sink(mpFile)
line[1] <- "Metapopulation input file (6.0 map=Ë‡"
line[2] <- title
line[3] <- "\n\n\n"
line[4] <- reps
line[5] <- duration
line[6] <- "TRUE "
line[7] <- "1 FALSE"
line[8] <- "\n"
line[9] <- "Local"
line[10] <- ""
line[11] <- "not spread"
line[12] <- "0.0000"
line[13] <- "0.0000,0.0000,0.0000,0.0000"
line[14] <- "\n"
line[15] <-  "Local"
line[16] <- ""
line[17] <- "not spread"
line[18] <- "0.0000"
line[19] <- "0.0000,0.0000,0.0000,0.0000"
line[20] <- "False,Zero"
line[21] <- "all vital rates"
line[22] <- "Lognormal,0"
line[23] <- "0.000000"
line[24] <- "count in total"
line[25] <- "1 (F, S, K correlated)"
line[26] <-  "No"
line[27] <- "AllStages"
line[28] <-  "Yes"
line[29] <- "EX\n"
line[30] <- "1"
line[31] <- "years"
line[32] <- "OnlyFemale"
line[33] <- "1"
line[34] <- "Monogamous"
line[35] <- "2.0"
line[36] <- "2.0"
line[37] <- "0.0000"
line[38] <- "0"
l = character()
for (i in 1:length(ind)){
l[i] <- pt$V1[ind[i]]
p = strsplit(pt$V1[ind[i]],",")
init[i] = unlist(p)[4]
}
line[39] <-  paste(l, collapse = "\n")
line[40] <-"Migration"
line[41] <-"FALSE"
line[42] <-pt$V1[migration_ind+2]
line[43] <- paste(rep(strrep(" 0,",length(ind)),length(ind)),collapse = "\n")
line[44] <-"Correlation"
line[45] <-"TRUE"
line[46] <-pt$V1[migration_ind+5]
line[47] <-"1 type(s) of stage matrix"
line[48] <-"default"
line[49] <-"1.000000"
line[50] <-"1.000000"
line[51] <-"0"
line[52] <-"1.000000000"
line[53] <-"1 type(s) of st.dev. matrix"
line[54] <-"default"
line[55] <-"0.000000000"
line[56] <-"Constraints Matrix"
line[57] <-"0.000000"
line[58] <-"1.000000"
line[59] <-"1.000000"
line[60] <-"1.000000"
line[61] <-"1.000000"
line[62] <-"1.000000"
line[63] <- paste(init,collapse = "\n")
line[64] <-"Stage 1"
line[65] <-"1.0"
line[66] <-"FALSE"
line[67] <-"TRUE"
line[68] <-"1.0"
line[69] <-"0 (pop mgmnt)"
line[70] <-"0.0"
line[71] <-"0.0"
line[72] <-"1"
line[73] <-"-End of file-"
print(line)
writeLines(line,mpFile)
}
convertPTCtoMP(nPath,n)
getBBatchFile(n,nPath)
getBBatchFile <- function(n,nPath)
{
batFile <- paste("batch",n,".BAT",sep = "")
batPath <- file.path(nPath,batFile)
mpFile <- paste("B",n,".mp",sep = "")
RAMAS_metapop <- r"("C:\Program Files\RAMAS Multispecies 6\Metapop.exe")"
line1<- paste('START /WAIT "title"',RAMAS_metapop,mpFile,'/RUN=YES','/TEX')
RAMAS_files <- r"("C:\Users\cb3452\Documents\RAMAS Model Files\*.*")"
nPath<- gsub("/", "\\\\", nPath)
nPath<- paste0("\"", nPath, "\"")
line2 <- paste("move",RAMAS_files,nPath)
writeLines(c(line,line2),batPath)
}
getBBatchFile(n,nPath)
getBBatchFile <- function(n,nPath)
{
batFile <- paste("batch",n,".BAT",sep = "")
batPath <- file.path(nPath,batFile)
mpFile <- paste("B",n,".mp",sep = "")
RAMAS_metapop <- r"("C:\Program Files\RAMAS Multispecies 6\Metapop.exe")"
line1<- paste('START /WAIT "title"',RAMAS_metapop,mpFile,'/RUN=YES','/TEX')
RAMAS_files <- r"("C:\Users\cb3452\Documents\RAMAS Model Files\*.*")"
nPath<- gsub("/", "\\\\", nPath)
nPath<- paste0("\"", nPath, "\"")
line2 <- paste("move",RAMAS_files,nPath)
writeLines(c(line1,line2),batPath)
}
getBBatchFile(n,nPath)
getBatchFile <- function(n,iter,path)
{
outPath <- file.path(path,"output")
ifelse(!dir.exists(outPath), dir.create(outPath), FALSE)
outMetaPath<- file.path(outPath,"metapop")
ifelse(!dir.exists(outMetaPath), dir.create(outMetaPath), FALSE)
path_meta <- file.path(path,"output","metapop")
batFile <- paste("batch",n,"_",iter,".BAT",sep = "")
batPath <- file.path(path,batFile)
XPTCFile <- paste("X",n,"_",iter,".ptc",sep = "")
ZPDYfile <- paste("Z",n,"_",iter,".pdy",sep = "")
RAMAS_spatial <- r"("C:\Program Files\RAMAS Multispecies 6\SpatialData.exe")"
RAMAS_hab <- r"("C:\Program Files\RAMAS Multispecies 6\Habdyn.exe")"
RAMAS_files <- r"("C:\Users\cb3452\Documents\RAMAS Model Files\*.*")"
line1<- paste('START /WAIT "title"',RAMAS_spatial,XPTCFile,'/RUN=YES /TEX')
line2<- paste('START /WAIT "title"',RAMAS_hab,ZPDYfile,'/RUN=YES /TEX')
RAMAS_metapop <- r"("C:\Program Files\RAMAS Multispecies 6\Metapop.exe")"
line3<- paste('START /WAIT "title"',RAMAS_metapop,ZMPfile,'/RUN=YES /TEX')
ZMPfile <- paste("Z",n,"_",iter,".mp",sep = "")
path_meta<- gsub("/", "\\\\", path_meta)
path_meta<- paste0("\"", path_meta, "\"")
line4 <- paste("move",RAMAS_files,path_meta)
writeLines(c(line1,line2,line3,line4),batPath)
}
iterPath <- file.path(nPath,paste("iter",iter,sep = ""))
iter = 1
iterPath <- file.path(nPath,paste("iter",iter,sep = ""))
getBatchFile(n,iter,iterPath)
getBatchFile <- function(n,iter,path)
{
outPath <- file.path(path,"output")
ifelse(!dir.exists(outPath), dir.create(outPath), FALSE)
outMetaPath<- file.path(outPath,"metapop")
ifelse(!dir.exists(outMetaPath), dir.create(outMetaPath), FALSE)
path_meta <- file.path(path,"output","metapop")
batFile <- paste("batch",n,"_",iter,".BAT",sep = "")
batPath <- file.path(path,batFile)
XPTCFile <- paste("X",n,"_",iter,".ptc",sep = "")
ZPDYfile <- paste("Z",n,"_",iter,".pdy",sep = "")
RAMAS_spatial <- r"("C:\Program Files\RAMAS Multispecies 6\SpatialData.exe")"
RAMAS_hab <- r"("C:\Program Files\RAMAS Multispecies 6\Habdyn.exe")"
RAMAS_files <- r"("C:\Users\cb3452\Documents\RAMAS Model Files\*.*")"
line1<- paste('START /WAIT "title"',RAMAS_spatial,XPTCFile,'/RUN=YES /TEX')
line2<- paste('START /WAIT "title"',RAMAS_hab,ZPDYfile,'/RUN=YES /TEX')
RAMAS_metapop <- r"("C:\Program Files\RAMAS Multispecies 6\Metapop.exe")"
ZMPfile <- paste("Z",n,"_",iter,".mp",sep = "")
line3<- paste('START /WAIT "title"',RAMAS_metapop,ZMPfile,'/RUN=YES /TEX')
path_meta<- gsub("/", "\\\\", path_meta)
path_meta<- paste0("\"", path_meta, "\"")
line4 <- paste("move",RAMAS_files,path_meta)
writeLines(c(line1,line2,line3,line4),batPath)
}
getBatchFile(n,iter,iterPath)
convertPTCtoPDY(nPath,iterPath,n,iter)
convertPTCtoPDY <- function(BPath, path,n,iter)
{
title <- paste("Z",n,"_",iter,sep = "")
pdyFile <- file.path(path,paste(title,".pdy",sep = ""))
mpFile <- file.path(path,paste(title,".mp",sep = ""))
mpFile<- gsub("/", "\\\\", mpFile)
t1 <- 1
t2 <- 10
kFile<- "pop"
fFile<- "pop"
sFile<- "pop"
XFile <- file.path(path,paste("X",n,"_",iter,".ptc",sep = ""))
BFile <- file.path(BPath,paste("B",n,".ptc",sep = ""))
XFile<- gsub("/", "\\\\", XFile)
BFile<- gsub("/", "\\\\", BFile)
#change1 <- "at mid-point"
change1 <- "linear"
change2<- "linear"
line= character()
#sink(pdyFile)
line[1] <- "Habitat Dynamics (version 4.1)"
line[2] <- paste(title,"\n\n\n\n",sep = "")
line[3] <- mpFile
line[4] <- kFile
line[5] <- fFile
line[6] <- sFile
line[7] <- "2"
line[8] <-BFile
line[9] <-t1
line[10] <-change1
line[11] <-change1
line[12] <-change1
line[13] <-XFile
line[14] <-t2
line[15] <-change2
line[16] <-change2
line[17] <-change2
# file.show(pdyFile)
writeLines(line,pdyFile)
}
convertPTCtoPDY(nPath,iterPath,n,iter)
convertPTCtoPDY <- function(BPath, path,n,iter)
{
title <- paste("Z",n,"_",iter,sep = "")
pdyFile <- file.path(path,paste(title,".pdy",sep = ""))
mpFile <- file.path(path,paste(title,".mp",sep = ""))
mpFile<- gsub("/", "\\\\", mpFile)
t1 <- 1
t2 <- 10
kFile<- "pop"
fFile<- "pop"
sFile<- "pop"
XFile <- file.path(path,paste("X",n,"_",iter,".ptc",sep = ""))
BFile <- file.path(BPath,paste("B",n,".ptc",sep = ""))
XFile<- gsub("/", "\\\\", XFile)
BFile<- gsub("/", "\\\\", BFile)
#change1 <- "at mid-point"
change1 <- "linear"
change2<- "linear"
line= character()
#sink(pdyFile)
line[1] <- "Habitat Dynamics (version 4.1)"
line[2] <- paste(title,"\n\n\n\n",sep = "")
line[3] <- mpFile
line[4] <- kFile
line[5] <- fFile
line[6] <- sFile
line[7] <- "2"
line[8] <-BFile
line[9] <-t1
line[10] <-change1
line[11] <-change1
line[12] <-change1
line[13] <-XFile
line[14] <-t2
line[15] <-change2
line[16] <-change2
line[17] <-change2
# file.show(pdyFile)
writeLines(line,pdyFile)
}
convertPTCtoPDY(nPath,iterPath,n,iter)
